{"version":3,"file":"static/js/115.47db6195.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Drawer/Drawer.jsx","components/Filter/Filter.jsx","Pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.filter;\n","import PropTypes from 'prop-types';\n\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { Button, Flex, Spacer, Text } from '@chakra-ui/react';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Flex alignItems=\"baseline\">\n      <Text>{name}</Text>\n      <Spacer minW=\"15px\" />\n      <span>{number}</span>\n      <Spacer minW=\"15px\" />\n      <Button\n        type=\"button\"\n        colorScheme=\"messenger\"\n        onClick={() => handleDelete(id)}\n        leftIcon={<DeleteIcon />}\n      >\n        Delete\n      </Button>\n    </Flex>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { Alert, List, ListItem } from '@chakra-ui/react';\nimport { AppLoader } from 'components/AppLoader/AppLoader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectFilter,\n  selectLoading,\n} from 'redux/contacts/selectors';\nimport { Contact } from './Contact/Contact';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  function handleFilter() {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n\n  const filterContacts = handleFilter();\n  return (\n    <List\n      spacing={3}\n      w=\"90%\"\n      maxW=\"400px\"\n      borderRadius=\"md\"\n      bg=\"gray.700\"\n      p={5}\n      mt={5}\n    >\n      {contacts.length === 0 && isLoading ? (\n        <AppLoader />\n      ) : contacts?.length === 0 ? (\n        <Alert status=\"info\" backgroundColor=\"transparent\">\n          You don't have contacts.\n        </Alert>\n      ) : filterContacts?.length === 0 ? (\n        <Alert status=\"info\" backgroundColor=\"transparent\">\n          No contacts were found matching your request.\n        </Alert>\n      ) : (\n        filterContacts?.map(contact => (\n          <ListItem key={contact.id}>\n            <Contact contact={contact} />\n          </ListItem>\n        ))\n      )}\n    </List>\n  );\n};\n","import { Input, Flex, FormControl, FormLabel, Button } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts, selectLoading } from 'redux/contacts/selectors';\nimport { toast } from 'react-hot-toast';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectLoading);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements[0].value;\n    const number = form.elements[1].value;\n\n    const contact = {\n      name,\n      number,\n    };\n\n    if (\n      contacts\n        ?.map(({ name }) => name.toLowerCase())\n        .includes(name.toLowerCase())\n    ) {\n      toast(`${name} is already in contacts.`, {\n        icon: 'ü§¶üèª‚Äç‚ôÇÔ∏è',\n        position: 'top-center',\n      });\n      return;\n    } else {\n      dispatch(addContact(contact));\n    }\n    form.reset();\n  };\n\n  return (\n    <FormControl\n      as=\"form\"\n      autoComplete=\"off\"\n      isRequired\n      onSubmit={handleSubmit}\n    >\n      <FormLabel htmlFor=\"field-:r1:\">Name</FormLabel>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Name\"\n        pattern=\"^[a-zA-Z–∞-—è–ê-–Ø]+(([' -][a-zA-Z–∞-—è–ê-–Ø ])?[a-zA-Z–∞-—è–ê-–Ø]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id=\"field-:r1:\"\n      />\n      <FormLabel htmlFor=\"field-:r2:\">Number</FormLabel>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Phone number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id=\"field-:r2:\"\n      />\n      <Flex justifyContent=\"center\">\n        <Button\n          isLoading={isLoading}\n          type=\"submit\"\n          colorScheme=\"messenger\"\n          mt={3}\n        >\n          Submit\n        </Button>\n      </Flex>\n    </FormControl>\n  );\n};\n","import {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Stack,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { useRef } from 'react';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { AddIcon } from '@chakra-ui/icons';\n\nexport const DrawerBar = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const firstField = useRef();\n\n  return (\n    <>\n      <Button\n        type=\"submit\"\n        colorScheme=\"messenger\"\n        mt={2}\n        onClick={onOpen}\n        leftIcon={<AddIcon />}\n      >\n        Add contact\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        initialFocusRef={firstField}\n        onClose={onClose}\n      >\n        <DrawerOverlay />\n        <DrawerContent backgroundColor=\"#2D3748\">\n          <DrawerCloseButton />\n          <DrawerHeader borderBottomWidth=\"1px\">Add new account</DrawerHeader>\n\n          <DrawerBody>\n            <Stack spacing=\"24px\">\n              <ContactForm />\n            </Stack>\n          </DrawerBody>\n\n          <DrawerFooter borderTopWidth=\"1px\">\n            <Button\n              variant=\"outline\"\n              mr={3}\n              onClick={onClose}\n              _hover={{ bg: 'blue.500', color: ' white' }}\n            >\n              Cancel\n            </Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n};\n","import { Heading, Input, Box } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { contactsFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    dispatch(contactsFilter(e.target.value));\n  };\n\n  return (\n    <Box>\n      <Heading\n        as=\"h3\"\n        size=\"lg\"\n        bgGradient=\"linear(to-l, #7928CA, #0078FF)\"\n        bgClip=\"text\"\n        textAlign=\"center\"\n      >\n        Find contacts by name\n      </Heading>\n      <Input\n        maxW=\"350px\"\n        input=\"text\"\n        variant=\"outline\"\n        placeholder=\"Enter name\"\n        focusBorderColor=\"#0078FF\"\n        bgGradient=\"linear(to-l, #7928CA, #0078FF)\"\n        bgClip=\"text\"\n        fontSize={20}\n        borderColor=\"black\"\n        mt={3}\n        onChange={handleFilter}\n      />\n    </Box>\n  );\n};\n","import { Box, Heading, Flex } from '@chakra-ui/react';\n\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { DrawerBar } from 'components/Drawer/Drawer';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectRefreshing } from 'redux/auth/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isRefresh = useSelector(selectRefreshing);\n\n  useEffect(() => {\n    if (isRefresh) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isRefresh]);\n\n  return (\n    <Box as=\"main\" py={3}>\n      <Flex flexDirection=\"column\" alignItems=\"center\">\n        <Filter />\n        <Heading\n          as=\"h2\"\n          size=\"xl\"\n          bgGradient=\"linear(to-l, #7928CA, #0078FF)\"\n          bgClip=\"text\"\n          mt={3}\n        >\n          Your contacts\n        </Heading>\n        <DrawerBar />\n        <ContactList />\n      </Flex>\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectLoading","isLoading","selectFilter","filter","Contact","contact","id","name","number","dispatch","useDispatch","alignItems","minW","type","colorScheme","onClick","deleteContact","leftIcon","ContactList","useSelector","useEffect","fetchContacts","filterContacts","toLowerCase","includes","spacing","w","maxW","borderRadius","bg","p","mt","length","AppLoader","status","backgroundColor","map","ContactForm","as","autoComplete","isRequired","onSubmit","e","preventDefault","form","target","elements","value","toast","icon","position","addContact","reset","htmlFor","placeholder","pattern","title","justifyContent","DrawerBar","useDisclosure","isOpen","onOpen","onClose","firstField","useRef","placement","initialFocusRef","borderBottomWidth","borderTopWidth","variant","mr","_hover","color","Filter","size","bgGradient","bgClip","textAlign","input","focusBorderColor","fontSize","borderColor","onChange","contactsFilter","isRefresh","selectRefreshing","py","flexDirection"],"sourceRoot":""}